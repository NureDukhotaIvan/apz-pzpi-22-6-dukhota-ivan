МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра Програмної інженерії



ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З лабораторної роботи №5
На тему: «Розгортання програмної системи»




Виконав: 										   Перевірив:
Ст. гр. ПЗПІ-22-6 						          доц. Сокорчук І. П.
Духота І. Є.








Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1
Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін
1	04.06.2025	0.1	Створено розділ «Історія змін»
2	04.06.2025	0.1	Створено розділ «Завдання»
3	04.06.2025	0.1	Створено розділ “Опис виконаної роботи”
4	04.06.2025	0.1	Створено розділ “Висновки”
5	04.06.2025	0.1	Додано додаток А
6	04.06.2025	0.1	Додано додаток Б


2 ЗАВДАННЯ
Розгорнути та протестувати програмну систему.
Відкрити створений на попередній лабораторній роботі репозиторій
GitHub.
Створіть у репозиторії директорію Lab5 та текстовий файл з описом
інженерних рішень у цій частині проєкту.
Зафіксуйте кожну внесену зміну командою git commit з відповідним
коментарем та фіксуйте цією командою усі наступні зміни у проекті.
Створіть у директорії Lab5 піддиректорію для програмного коду.
Створіть програмний код, завантажте його у створену піддиректорію,
зафіксуйте внесені у репозиторій зміни.
Виконайте функціональне тестування створеного програмного коду та
створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними
поясненнями процесу тестування.
Завантажте створений відеозапис тестування YouTube канал для вашого
облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу
https://dl.nure.ua/.
У коментарях до завантаженого звіту вкажіть посилання на відеозапис
тестування у вашому каналі YouTube.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Було створено повноцінну програмну систему «SchoolDef», яка включає в себе серверну частину, frontend частину, IoT-клієнт та мобільний додаток.
Серверна частина була створена за допомогою фреймворку Django на мові програмування Python. Для зберігання даних використовується база даних PostgreSQL. Управління версіями коду здійснюється за допомогою системи контролю версій Git, код розміщено в репозиторії GitHub.
Веб-клієнт було створено за допомогою HTML, CSS для створення розмітки та JS для взаємодії елементів та з сервером. 
Мобільний клієнт було створено за допомогою мови програмування Kotlin з використанням Android SDK.
IoT-клієнт було створено на мові програмування Python, з використанням бібліотеки response. IoT пристрій автоматично генерує значення для кожного сенсора бази даних та створює нові записи у відповідні таблиці у разі відображення критичних показників.
Для розгортання програмної системи було використано Docker та Docker Compose. Для запуску необхідно клонувати репозиторій з GitHub за допомогою відповідної команди.


4 ВИСНОВКИ
В результаті виконання лабораторної роботи №5 було розгорнуто програмну систему «SchoolDef».


ДОДАТОК А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/UlSTClaJNl4
Хронологічний опис доповіді: 
00:00 - Вступ
00:15 - Пояснення реалізації Docker
00:53 - Серверна частина програмного застосунку: отримання токену адміністратора
01:11 - Серверна частина програмного застосунку: додавання нового запису до таблиці сенсорів
01:39 - IoT частина програмного застосунку
02:52 - Веб-частина програмного застосунку: вхід в акаунт
03:04 - Веб-частина програмного застосунку: сторінка контролю камер
03:22 - Веб-частина програмного застосунку: сторінка контролю сенсорів
04:05 - Веб-частина програмного застосунку: сторінка контролю користувачів
04:49 - Веб-частина програмного застосунку: сторінка перегляду статистики
06:08 - Веб-частина програмного застосунку: демонстрація інтернаціоналізації
06:18 - Мобайл частина програмного застосунку: вхід в акаунт
06:46 - Мобайл частина програмного застосунку: профіль користувача та можливий функціонал


ДОДАТОК Б

Б.1 Dockerfile
GitHub репозиторій: https://github.com/NureDukhotaIvan/apz-pzpi-22-6-dukhota-ivan/blob/main/Lab5/pzpi-22-6-dukhota-ivan-lab5/SchoolDef-BackEnd/Dockerfile 
1. FROM python:3.11-slim
2. 
3. WORKDIR /app
4. 
5. COPY ./schooldef /app
6. 
7. RUN pip install --upgrade pip
8. RUN pip install -r requirements.txt
9. 
10. CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
11. 
12. EXPOSE 8000


Б.2 docker-compose.yml
GitHub репозиторій: https://github.com/NureDukhotaIvan/apz-pzpi-22-6-dukhota-ivan/blob/main/Lab5/pzpi-22-6-dukhota-ivan-lab5/SchoolDef-BackEnd/docker-compose.yml 
1. version: "3.9"
2. services:
3.   backend:
4.     build: .
5.     volumes:
6.       - ./schooldef:/app
7.     ports:
8.       - "8000:8000"
9.     environment:
10.       - DJANGO_DB_HOST=db
11.       - DJANGO_DB_NAME=SchoolDef2
12.       - DJANGO_DB_USER=postgres
13.       - DJANGO_DB_PASSWORD=root
14.     depends_on:
15.       - db
16. 
17.   db:
18.     image: postgres:15
19.     environment:
20.       POSTGRES_DB: SchoolDef2
21.       POSTGRES_USER: postgres
22.       POSTGRES_PASSWORD: root
23.     volumes:
24.       - postgres_data:/var/lib/postgresql/data
25. 
26. volumes:
27.   postgres_data:

