МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра Програмної інженерії



ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З практичної роботи №1
На тему: «Патерни проєктування»



Виконав: 										   Перевірив:
Ст. гр. ПЗПІ-22-6 							      Ст. вик. каф. ПІ
Духота І. Є. 								        Сокорчук І. П.









Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1
Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін
1	08.04.2025	0.1	Створено розділ «Історія змін»
2	08.04.2025	0.1	Створено розділ «Завдання»
3	08.04.2025	0.1	Створено розділ “Опис виконаної роботи”
4	08.04.2025	0.1	Створено розділ “Висновки”
5	08.04.2025	0.1	Додані слайди презентації у Додаток Б
6	08.04.2025	0.1	Додані приклади програмного коду у Додаток А
7	08.04.2025	0.1	Додані посилання і хронологічний опис доповіді у Додаток А



















2 ЗАВДАННЯ
Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ».
Створити та оформити слайди презентації доповіді.
Створити та опублікувати на YouTube відеозапис доповіді.
Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua.
Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main.
Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань.
Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub.
Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1.















3 ОПИС ВИКОНАНОЇ РОБОТИ
Яку проблему вирішує патерн «Абстрактна фабрика»
Патерн "Абстрактна фабрика" пропонує створити абстракції для кожного з продуктів у сімействі. Це дозволяє створювати фабрики, які відповідають за виробництво певної варіації продуктів. Кожна така фабрика буде реалізовувати методи для створення всіх об'єктів цього сімейства.
Структура патерну
Патерн "Абстрактна фабрика" має чітку структуру, яка включає кілька основних компонентів:
Абстрактні продукти (Abstract Products): Це інтерфейси або абстрактні класи для різних типів продуктів. Вони описують спільні методи для кожного продукту, але не визначають конкретної реалізації.
Конкретні продукти (Concrete Products): Це конкретні реалізації абстрактних продуктів. Вони відповідають за створення об'єктів, що належать до конкретних варіацій. 
Абстрактна фабрика (Abstract Factory): Це інтерфейс або абстрактний клас, який визначає методи для створення всіх продуктів, необхідних для певного сімейства. Абстрактна фабрика не має конкретної реалізації продуктів, а лише визначає, що конкретні фабрики повинні реалізовувати.
Конкретні фабрики (Concrete Factories): Це класи, що реалізують методи абстрактної фабрики. Кожна конкретна фабрика створює конкретні варіанти продуктів.
Клієнт (Client): Клієнтський код працює лише з абстракціями, не знаючи точно, яка конкретна фабрика використовується для створення продуктів. Клієнт запитує абстрактну фабрику на створення продуктів і фабрика повертає об'єкти конкретних продуктів через абстрактні інтерфейси.
Використання патерну
Застосовність патерну "Абстрактна фабрика" визначається кількома ситуаціями, коли його використання є найбільш доцільним:
Патерн "Абстрактна фабрика" приховує деталі створення об'єктів від клієнтського коду. Клієнтський код взаємодіє лише з абстракціями продуктів, а не з конкретними класами. Це дозволяє змінювати конкретні реалізації продуктів, не змінюючи сам клієнтський код. Такий підхід особливо корисний, коли необхідно створювати різні варіанти продуктів і забезпечити їх взаємодію без прив'язки до конкретних реалізацій.

Переваги патерну
Гарантує сполучуваність вироблених продуктів.
Позбавляє клієнтський код прив’язки до конкретних класів продуктів.
Виділяє код виробництва товарів у одне місце, спрощуючи підтримку коду.
Спрощує додавання нових продуктів до програми.
Реалізує принцип відкритості/закритості.
Недоліки патерну
Ускладнює код програми через введення множини додаткових класів.
Потребує наявності всіх типів продуктів у кожній варіації.
Приклад коду реалізації патеру:
Приклад коду наведено у додатку В. Програмний код для прикладу наведено на мові Python.
Рекомендації щодо використання патерну:
Створіть таблицю відповідностей типів продуктів до варіацій сімейств продуктів. Це дозволяє чітко розуміти, які конкретні продукти належать до яких варіацій та сімейств продуктів.
Зведіть всі варіації продуктів до загальних інтерфейсів. Для кожного типу продукту необхідно визначити загальний інтерфейс, що об'єднує всі варіації продуктів.
Визначте інтерфейс абстрактної фабрики. Інтерфейс абстрактної фабрики повинен містити методи для створення кожного типу продуктів. Ці методи будуть викликатися для отримання об'єктів відповідних типів.
Створіть класи конкретних фабрик, реалізуючи інтерфейс абстрактної фабрики. Для кожної варіації сімейства продуктів потрібно створити конкретну фабрику, яка реалізує методи абстрактної фабрики та створює продукти цієї варіації.
Змініть код ініціалізації програми, щоб він створював певну фабрику і передавав її в клієнтський код. Програма повинна створювати конкретну фабрику в залежності від умов (наприклад, конфігурації або параметрів оточення), і передавати її в клієнтський код.
Замість того, щоб безпосередньо створювати продукти в клієнтському коді, використовуйте виклики відповідних методів фабрики. Клієнтський код повинен працювати з фабрикою і її методами для створення продуктів, а не безпосередньо створювати об'єкти продуктів.

























4 ВИСНОВКИ
Патерн "Абстрактна фабрика" дозволяє створювати сімейства взаємопов'язаних об'єктів, не прив'язуючи код до конкретних класів продуктів. Він забезпечує гнучкість і масштабованість системи, дозволяючи додавати нові варіації продуктів без зміни клієнтського коду. За допомогою цього патерну можна забезпечити взаємозамінність продуктів в межах одного сімейства, що спрощує підтримку та розширення системи. Патерн особливо корисний у системах з багатьма варіаціями продуктів, де важлива їх сумісність і стандартизовані способи створення. Використання абстрактних фабрик дозволяє ізолювати створення об'єктів від клієнтського коду, що покращує модульність і знижує залежності, забезпечуючи чистоту коду та легкість в оновленні чи додаванні нових продуктів або варіацій без необхідності змінювати існуючі частини системи.



















Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/tnfBeLVo8RI
Хронологічний опис доповіді:
00:00 - Початок відео
00:07 - Суть патерну
00:15 - Проблема та рішення
00:50 - Структура патерну
1:47 - Застосовність патерну
3:14 - Кроки реалізації патерну
4:27 - Переваги та недоліки патерну
4:53 - Приклад реалізації патерну на мові програмування Python
6:05 - Висновок
6:47 - Джерела













Додаток Б
Слайди презентації №1

 
Рисунок Б.1 – Титульний слайд презентації

 
Рисунок Б.2 – Суть патерну

 
Рисунок Б.3 – Проблема та рішення патерну «Абстрактна фабрика»

 
Рисунок Б.4 – Структура патерну «Абстрактна фабрика»

 
Рисунок Б.5 – Структура патерну «Абстрактна фабрика»

 
Рисунок Б.6 – Застосовність патерну «Абстрактна фабрика»

 
Рисунок Б.7 – Застосовність патерну «Абстрактна фабрика»

 
Рисунок Б.8 – Застосовність патерну «Абстрактна фабрика»

 
Рисунок Б.9 – Кроки реалізації патерну «Абстрактна фабрика»

 
Рисунок Б.10 – Переваги та недоліки патерну «Абстрактна фабрика»

 
Рисунок Б.11 – Приклад реалізації на мові програмування Python

 
Рисунок Б.12 – Приклад реалізації на мові програмування Python

 
Рисунок Б.13 – Приклад реалізації на мові програмування Python

 
Рисунок Б.14 – Приклад реалізації на мові програмування Python

 
Рисунок Б.15 – Висновки

 
Рисунок Б.16 – Джерела




Додаток В
Приклад коду реалізації патерну «Абстрактна фабрика» на мові програмування Python
1  from abc import ABC, abstractmethod
2 
3 
4  # Абстрактні продукти
5  class Car(ABC):
6     @abstractmethod
7     def drive(self):
8         pass
9 
10  class Motorcycle(ABC):
11     @abstractmethod
12     def ride(self):
13         pass
14 
15 
16  # Конкретні продукти для спортивних автомобілів та мотоциклів
17  class SportsCar(Car):
18     def drive(self):
19         return "Driving a sports car at high speed."
20  class SportsMotorcycle(Motorcycle):
21     def ride(self):
22         return "Riding a sports motorcycle at high speed."
23 
24 
25  # Конкретні продукти для класичних автомобілів та мотоциклів
26  class ClassicCar(Car):
27     def drive(self):
28         return "Driving a classic car leisurely."
29  class ClassicMotorcycle(Motorcycle):
30     def ride(self):
31         return "Riding a classic motorcycle leisurely."
32 
33 
34  # Абстрактна фабрика
35  class VehicleFactory(ABC):
36     @abstractmethod
37     def create_car(self):
38         pass
39     @abstractmethod
40     def create_motorcycle(self):
41         pass
42 
43 
44 # Конкретні фабрики для спортивних та класичних транспортних засобів
45   class SportsVehicleFactory(VehicleFactory):
46     def create_car(self):
47         return SportsCar()
48 
49     def create_motorcycle(self):
50         return SportsMotorcycle()
51   class ClassicVehicleFactory(VehicleFactory):
52     def create_car(self):
53         return ClassicCar()
54 
55     def create_motorcycle(self):
56         return ClassicMotorcycle()
57 
58 
59   # Клієнтський код
60   def vehicle_client(factory: VehicleFactory):
61     car = factory.create_car()
62     motorcycle = factory.create_motorcycle()
63 
64     print(car.drive())
65     print(motorcycle.ride())
66 
67 
68    # Використання спортивної фабрики
69    print("Sports Vehicles:")
70    sports_factory = SportsVehicleFactory()
71    vehicle_client(sports_factory)
72 
73   # Використання класичної фабрики
74   print("\nClassic Vehicles:")
75   classic_factory = ClassicVehicleFactory()
76   vehicle_client(classic_factory)


